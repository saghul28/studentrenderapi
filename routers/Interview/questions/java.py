java_questions = [
    {
        "number": 1,
        "question": "What is Java?",
        "answer": "Java is a high-level, object-oriented programming language developed by Sun Microsystems (now owned by Oracle). It is designed to be platform-independent and is widely used for developing desktop, web, and mobile applications.",
        "learned": False
    },
    {
        "number": 2,
        "question": "What are the main features of Java?",
        "answer": "The main features of Java include platform independence, object-oriented programming, robustness, security, portability, and multi-threading support.",
        "learned": False
    },
    {
        "number": 3,
        "question": "Explain the concept of platform independence in Java.",
        "answer": "Platform independence in Java means that Java code can run on any platform that has a Java Virtual Machine (JVM) installed. Java achieves platform independence by compiling code into an intermediate bytecode format, which can be executed on any platform with a JVM.",
        "learned": False
    },
    {
        "number": 4,
        "question": "What is bytecode?",
        "answer": "Bytecode is an intermediate representation of a Java program that is generated by the Java compiler. It is platform-independent and can be executed by any Java Virtual Machine (JVM).",
        "learned": False
    },
    {
        "number": 5,
        "question": "What is the Java Virtual Machine (JVM)?",
        "answer": "The Java Virtual Machine (JVM) is an abstract computing machine that provides a runtime environment for executing Java bytecode. It is responsible for interpreting or compiling bytecode into machine code, managing memory, and providing other runtime services.",
        "learned": False
    },
    {
        "number": 6,
        "question": "What is the difference between JDK, JRE, and JVM?",
        "answer": "JDK (Java Development Kit) is a software development kit that provides tools for developing Java applications. It includes the Java compiler, JRE, and other development tools. JRE (Java Runtime Environment) is a runtime environment that provides the libraries, Java Virtual Machine (JVM), and other components required to run Java applications. JVM (Java Virtual Machine) is an abstract computing machine that provides a runtime environment for executing Java bytecode.",
        "learned": False
    },
    {
        "number": 7,
        "question": "What is object-oriented programming (OOP)?",
        "answer": "Object-oriented programming (OOP) is a programming paradigm based on the concept of objects, which can contain data in the form of fields (attributes or properties) and code in the form of methods. It emphasizes encapsulation, inheritance, and polymorphism as key principles for organizing and structuring code.",
        "learned": False
    },
    {
        "number": 8,
        "question": "What are the four main principles of object-oriented programming (OOP)?",
        "answer": "The four main principles of object-oriented programming (OOP) are encapsulation, inheritance, polymorphism, and abstraction.",
        "learned": False
    },
    {
        "number": 9,
        "question": "Explain encapsulation in Java.",
        "answer": "Encapsulation in Java is the mechanism of bundling data (attributes) and methods (behaviors) that operate on the data into a single unit called an object. It restricts direct access to the data and allows access only through the methods, which provides better control and security.",
        "learned": False
    },
    {
        "number": 10,
        "question": "What is a class in Java?",
        "answer": "A class in Java is a blueprint or template for creating objects. It defines the properties (attributes or fields) and behaviors (methods) that objects of the class will have.",
        "learned": False
    },
    {
        "number": 11,
        "question": "What is an object in Java?",
        "answer": "An object in Java is an instance of a class. It represents a real-world entity with attributes (data) and behaviors (methods). Objects are created from classes using the 'new' keyword.",
        "learned": False
    },
    {
        "number": 12,
        "question": "What is inheritance in Java?",
        "answer": "Inheritance in Java is the mechanism by which one class (subclass or derived class) inherits the properties and behaviors of another class (superclass or base class). It promotes code reuse and allows the creation of a hierarchy of classes.",
        "learned": False
    },
    {
        "number": 13,
        "question": "What is the 'extends' keyword used for in Java?",
        "answer": "The 'extends' keyword in Java is used to establish inheritance between classes. It indicates that one class is a subclass of another class.",
        "learned": False
    },
    {
        "number": 14,
        "question": "What is polymorphism in Java?",
        "answer": "Polymorphism in Java is the ability of a single entity (such as a method or class) to take on multiple forms. It allows methods to behave differently based on the object they are called on or the arguments they receive.",
        "learned": False
    },
    {
        "number": 15,
        "question": "What are the two types of polymorphism in Java?",
        "answer": "The two types of polymorphism in Java are compile-time polymorphism (method overloading) and runtime polymorphism (method overriding).",
        "learned": False
    },
    {
        "number": 16,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 17,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 18,
        "question": "What is an interface in Java?",
        "answer": "An interface in Java is a reference type that defines a set of abstract methods. It provides a contract for classes that implement it, specifying what methods they must implement. Interfaces can also contain constant fields.",
        "learned": False
    },
    {
        "number": 19,
        "question": "Can a class implement multiple interfaces in Java?",
        "answer": "Yes, a class in Java can implement multiple interfaces. This allows the class to inherit behavior from multiple sources.",
        "learned": False
    },
    {
        "number": 20,
        "question": "What is an abstract class in Java?",
        "answer": "An abstract class in Java is a class that cannot be instantiated on its own and may contain abstract methods, which are declared but not implemented. Abstract classes are designed to be subclassed, and they provide a way to define common behavior for subclasses.",
        "learned": False
    },
    {
        "number": 21,
        "question": "What is the 'abstract' keyword used for in Java?",
        "answer": "The 'abstract' keyword in Java is used to declare abstract classes and abstract methods. Abstract classes cannot be instantiated, and abstract methods must be implemented by subclasses.",
        "learned": False
    },
    {
        "number": 22,
        "question": "What is a constructor in Java?",
        "answer": "A constructor in Java is a special method that is called when an object of a class is created. It is used to initialize the object's state and allocate memory for the object.",
        "learned": False
    },
    {
        "number": 23,
        "question": "What is the difference between constructors and methods in Java?",
        "answer": "Constructors are special methods used for initializing objects when they are created, while methods are regular functions that define behavior and can be called on objects after they are created.",
        "learned": False
    },
    {
        "number": 24,
        "question": "Can a constructor have a return type in Java?",
        "answer": "No, a constructor in Java cannot have a return type. Its purpose is to initialize an object's state, not to return a value.",
        "learned": False
    },
    {
        "number": 25,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 26,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 27,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 28,
        "question": "What is the difference between method overloading and method overriding in Java?",
        "answer": "Method overloading involves defining multiple methods in the same class with the same name but different parameter lists, while method overriding involves providing a new implementation for a method that is already defined in a superclass. Method overloading is determined at compile time, while method overriding is determined at runtime.",
        "learned": False
    },
    {
        "number": 29,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 30,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 31,
        "question": "What is the difference between method hiding and method overriding in Java?",
        "answer": "Method hiding involves defining a static method in a subclass with the same name and signature as a static method in its superclass, while method overriding involves providing a new implementation for a non-static method that is already defined in a superclass. Method hiding is determined by the reference type at compile time, while method overriding is determined by the object type at runtime.",
        "learned": False
    },
    {
        "number": 32,
        "question": "What is a static keyword in Java?",
        "answer": "The 'static' keyword in Java is used to declare variables, methods, and nested classes as static. Static members belong to the class rather than any specific instance of the class, and they can be accessed using the class name.",
        "learned": False
    },
    {
        "number": 33,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 34,
        "question": "What is a package in Java?",
        "answer": "A package in Java is a mechanism for organizing related classes and interfaces into namespaces. It helps prevent naming conflicts, improve code reusability, and make code easier to manage.",
        "learned": False
    },
    {
        "number": 35,
        "question": "What is a constructor in Java?",
        "answer": "A constructor in Java is a special method that is called when an object of a class is created. It is used to initialize the object's state and allocate memory for the object.",
        "learned": False
    },
    {
        "number": 36,
        "question": "What is constructor chaining in Java?",
        "answer": "Constructor chaining in Java is the process of calling one constructor from another constructor within the same class or from a superclass. It allows for code reuse and helps ensure that common initialization logic is executed.",
        "learned": False
    },
    {
        "number": 37,
        "question": "What is an anonymous class in Java?",
        "answer": "An anonymous class in Java is a class without a name that is defined and instantiated in a single expression. It is typically used for one-time use cases where creating a separate named class would be unnecessary.",
        "learned": False
    },
    {
        "number": 38,
        "question": "What is the 'this' keyword used for in Java?",
        "answer": "The 'this' keyword in Java is used to refer to the current object instance within a class. It can be used to access instance variables, call other constructors, or pass the current object as a parameter.",
        "learned": False
    },
    {
        "number": 39,
        "question": "What is a static block in Java?",
        "answer": "A static block in Java is a block of code enclosed in curly braces that is executed when the class is loaded into memory. It is used to initialize static variables or perform any other initialization tasks that need to be done once when the class is initialized.",
        "learned": False
    },
    {
        "number": 40,
        "question": "What is a default constructor in Java?",
        "answer": "A default constructor in Java is a constructor that is automatically generated by the compiler if no explicit constructors are defined in a class. It initializes instance variables to their default values and is provided by default if no other constructors are defined.",
        "learned": False
    },
    {
        "number": 41,
        "question": "What is a nested class in Java?",
        "answer": "A nested class in Java is a class that is defined within another class. It can be either static or non-static and has access to the members of the enclosing class.",
        "learned": False
    },
    {
        "number": 42,
        "question": "What is an inner class in Java?",
        "answer": "An inner class in Java is a non-static nested class that is defined within another class. It has access to the members of the enclosing class, including private members.",
        "learned": False
    },
    {
        "number": 43,
        "question": "What is a static nested class in Java?",
        "answer": "A static nested class in Java is a nested class that is declared as static. It does not have access to the instance variables and methods of the enclosing class and can be instantiated without an instance of the enclosing class.",
        "learned": False
    },
    {
        "number": 44,
        "question": "What is method reference in Java?",
        "answer": "Method reference in Java is a shorthand syntax for invoking a method using the double colon (::) operator. It is used to pass methods as arguments to functional interfaces or lambda expressions.",
        "learned": False
    },
    {
        "number": 45,
        "question": "What is the purpose of the 'new' keyword in Java?",
        "answer": "The 'new' keyword in Java is used to create new objects from classes. It allocates memory for the object and calls the constructor to initialize the object's state.",
        "learned": False
    },
    {
        "number": 46,
        "question": "What is the difference between '== 'and 'equals()' method in Java?",
        "answer": "'==' is used to compare the reference of two objects in Java, while 'equals()' method is used to compare the content or value of two objects.",
        "learned": False
    },
    {
        "number": 47,
        "question": "What is the 'instanceof' operator used for in Java?",
        "answer": "The 'instanceof' operator in Java is used to test whether an object is an instance of a particular class or interface. It returns true if the object is an instance of the specified type, otherwise False.",
        "learned": False
    },
    {
        "number": 48,
        "question": "What is a package in Java?",
        "answer": "A package in Java is a mechanism for organizing related classes and interfaces into namespaces. It helps prevent naming conflicts, improve code reusability, and make code easier to manage.",
        "learned": False
    },
    {
        "number": 49,
        "question": "What is the purpose of the 'import' statement in Java?",
        "answer": "The 'import' statement in Java is used to import classes, interfaces, or entire packages into the current source file. It allows you to use the imported types without fully qualifying their names.",
        "learned": False
    },
    {
        "number": 50,
        "question": "What is the 'default' keyword used for in Java?",
        "answer": "The 'default' keyword in Java is used to provide a default implementation for methods in interfaces. It allows interfaces to evolve over time without breaking existing implementations.",
        "learned": False
    },
    {
        "number": 51,
        "question": "What is inheritance in Java?",
        "answer": "Inheritance in Java is the mechanism by which one class (subclass or derived class) inherits the properties and behaviors of another class (superclass or base class). It promotes code reuse and allows the creation of a hierarchy of classes.",
        "learned": False
    },
    {
        "number": 52,
        "question": "What is a superclass in Java?",
        "answer": "A superclass in Java is a class from which another class (subclass) inherits properties and behaviors. It is also known as a base class or parent class.",
        "learned": False
    },
    {
        "number": 53,
        "question": "What is a subclass in Java?",
        "answer": "A subclass in Java is a class that inherits properties and behaviors from another class (superclass). It is also known as a derived class or child class.",
        "learned": False
    },
    {
        "number": 54,
        "question": "What is the 'extends' keyword used for in Java?",
        "answer": "The 'extends' keyword in Java is used to establish inheritance between classes. It indicates that one class is a subclass of another class.",
        "learned": False
    },
    {
        "number": 55,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 56,
        "question": "What are access modifiers in Java?",
        "answer": "Access modifiers in Java are keywords used to control the visibility and accessibility of classes, fields, methods, and other members. The main access modifiers in Java are 'public', 'protected', 'default' (no modifier), and 'private'.",
        "learned": False
    },
    {
        "number": 57,
        "question": "What is the 'public' access modifier used for in Java?",
        "answer": "The 'public' access modifier in Java is used to specify that a class, field, method, or other member is accessible from any other class or package.",
        "learned": False
    },
    {
        "number": 58,
        "question": "What is the 'protected' access modifier used for in Java?",
        "answer": "The 'protected' access modifier in Java is used to specify that a class, field, or method is accessible within its own package and by subclasses, regardless of their package.",
        "learned": False
    },
    {
        "number": 59,
        "question": "What is the 'default' access modifier used for in Java?",
        "answer": "The 'default' (no modifier) access modifier in Java is used to specify that a class, field, or method is accessible only within its own package.",
        "learned": False
    },
    {
        "number": 60,
        "question": "What is the 'private' access modifier used for in Java?",
        "answer": "The 'private' access modifier in Java is used to specify that a field or method is accessible only within the same class.",
        "learned": False
    },
    {
        "number": 61,
        "question": "What is an abstract class in Java?",
        "answer": "An abstract class in Java is a class that cannot be instantiated on its own and may contain abstract methods, which are declared but not implemented. Abstract classes are designed to be subclassed, and they provide a way to define common behavior for subclasses.",
        "learned": False
    },
    {
        "number": 62,
        "question": "What is an interface in Java?",
        "answer": "An interface in Java is a reference type that defines a set of abstract methods. It provides a contract for classes that implement it, specifying what methods they must implement. Interfaces can also contain constant fields.",
        "learned": False
    },
    {
        "number": 63,
        "question": "What is the difference between abstract class and interface in Java?",
        "answer": "Abstract classes can have both abstract and concrete methods, while interfaces can only have abstract methods. Abstract classes can have fields and constructors, while interfaces cannot. A class can implement multiple interfaces but can extend only one class (abstract or concrete).",
        "learned": False
    },
    {
        "number": 64,
        "question": "What is a constructor in Java?",
        "answer": "A constructor in Java is a special method that is called when an object of a class is created. It is used to initialize the object's state and allocate memory for the object.",
        "learned": False
    },
    {
        "number": 65,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 66,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 67,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 68,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 69,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 70,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 71,
        "question": "What is a static block in Java?",
        "answer": "A static block in Java is a block of code enclosed in curly braces that is executed when the class is loaded into memory. It is used to initialize static variables or perform any other initialization tasks that need to be done once when the class is initialized.",
        "learned": False
    },
    {
        "number": 72,
        "question": "What is the 'this' keyword used for in Java?",
        "answer": "The 'this' keyword in Java is used to refer to the current object instance within a class. It can be used to access instance variables, call other constructors, or pass the current object as a parameter.",
        "learned": False
    },
    {
        "number": 73,
        "question": "What is the difference between '==' and 'equals()' method in Java?",
        "answer": "'==' is used to compare the reference of two objects in Java, while 'equals()' method is used to compare the content or value of two objects.",
        "learned": False
    },
    {
        "number": 74,
        "question": "What is the 'instanceof' operator used for in Java?",
        "answer": "The 'instanceof' operator in Java is used to test whether an object is an instance of a particular class or interface. It returns true if the object is an instance of the specified type, otherwise False.",
        "learned": False
    },
    {
        "number": 75,
        "question": "What is the purpose of the 'import' statement in Java?",
        "answer": "The 'import' statement in Java is used to import classes, interfaces, or entire packages into the current source file. It allows you to use the imported types without fully qualifying their names.",
        "learned": False
    },
    {
        "number": 76,
        "question": "What is a package in Java?",
        "answer": "A package in Java is a mechanism for organizing related classes and interfaces into namespaces. It helps prevent naming conflicts, improve code reusability, and make code easier to manage.",
        "learned": False
    },
    {
        "number": 77,
        "question": "What is method reference in Java?",
        "answer": "Method reference in Java is a shorthand syntax for invoking a method using the double colon (::) operator. It is used to pass methods as arguments to functional interfaces or lambda expressions.",
        "learned": False
    },
    {
        "number": 78,
        "question": "What is the 'default' keyword used for in Java?",
        "answer": "The 'default' keyword in Java is used to provide a default implementation for methods in interfaces. It allows interfaces to evolve over time without breaking existing implementations.",
        "learned": False
    },
    {
        "number": 79,
        "question": "What is constructor chaining in Java?",
        "answer": "Constructor chaining in Java is the process of calling one constructor from another constructor within the same class or from a superclass. It allows for code reuse and helps ensure that common initialization logic is executed.",
        "learned": False
    },
    {
        "number": 80,
        "question": "What is an anonymous class in Java?",
        "answer": "An anonymous class in Java is a class without a name that is defined and instantiated in a single expression. It is typically used for one-time use cases where creating a separate named class would be unnecessary.",
        "learned": False
    },
    {
        "number": 81,
        "question": "What is an inner class in Java?",
        "answer": "An inner class in Java is a non-static nested class that is defined within another class. It has access to the members of the enclosing class, including private members.",
        "learned": False
    },
    {
        "number": 82,
        "question": "What is a static nested class in Java?",
        "answer": "A static nested class in Java is a nested class that is declared as static. It does not have access to the instance variables and methods of the enclosing class and can be instantiated without an instance of the enclosing class.",
        "learned": False
    },
    {
        "number": 83,
        "question": "What is a default constructor in Java?",
        "answer": "A default constructor in Java is a constructor that is automatically generated by the compiler if no explicit constructors are defined in a class. It initializes instance variables to their default values and is provided by default if no other constructors are defined.",
        "learned": False
    },
    {
        "number": 84,
        "question": "What is a nested class in Java?",
        "answer": "A nested class in Java is a class that is defined within another class. It can be either static or non-static and has access to the members of the enclosing class.",
        "learned": False
    },
    {
        "number": 85,
        "question": "What is a static nested class in Java?",
        "answer": "A static nested class in Java is a nested class that is declared as static. It does not have access to the instance variables and methods of the enclosing class and can be instantiated without an instance of the enclosing class.",
        "learned": False
    },
    {
        "number": 86,
        "question": "What is an inner class in Java?",
        "answer": "An inner class in Java is a non-static nested class that is defined within another class. It has access to the members of the enclosing class, including private members.",
        "learned": False
    },
    {
        "number": 87,
        "question": "What is constructor chaining in Java?",
        "answer": "Constructor chaining in Java is the process of calling one constructor from another constructor within the same class or from a superclass. It allows for code reuse and helps ensure that common initialization logic is executed.",
        "learned": False
    },
    {
        "number": 88,
        "question": "What is an anonymous class in Java?",
        "answer": "An anonymous class in Java is a class without a name that is defined and instantiated in a single expression. It is typically used for one-time use cases where creating a separate named class would be unnecessary.",
        "learned": False
    },
    {
        "number": 89,
        "question": "What is method reference in Java?",
        "answer": "Method reference in Java is a shorthand syntax for invoking a method using the double colon (::) operator. It is used to pass methods as arguments to functional interfaces or lambda expressions.",
        "learned": False
    },
    {
        "number": 90,
        "question": "What is the 'default' keyword used for in Java?",
        "answer": "The 'default' keyword in Java is used to provide a default implementation for methods in interfaces. It allows interfaces to evolve over time without breaking existing implementations.",
        "learned": False
    },
    {
        "number": 91,
        "question": "What is a static block in Java?",
        "answer": "A static block in Java is a block of code enclosed in curly braces that is executed when the class is loaded into memory. It is used to initialize static variables or perform any other initialization tasks that need to be done once when the class is initialized.",
        "learned": False
    },
    {
        "number": 92,
        "question": "What is the 'this' keyword used for in Java?",
        "answer": "The 'this' keyword in Java is used to refer to the current object instance within a class. It can be used to access instance variables, call other constructors, or pass the current object as a parameter.",
        "learned": False
    },
    {
        "number": 93,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 94,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 95,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 96,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 97,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 98,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 99,
        "question": "What is method reference in Java?",
        "answer": "Method reference in Java is a shorthand syntax for invoking a method using the double colon (::) operator. It is used to pass methods as arguments to functional interfaces or lambda expressions.",
        "learned": False
    },
    {
        "number": 100,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 101,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 102,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 103,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 104,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 105,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 106,
        "question": "What is the difference between '==' and 'equals()' method in Java?",
        "answer": "'==' is used to compare the reference of two objects in Java, while 'equals()' method is used to compare the content or value of two objects.",
        "learned": False
    },
    {
        "number": 107,
        "question": "What is the 'instanceof' operator used for in Java?",
        "answer": "The 'instanceof' operator in Java is used to test whether an object is an instance of a particular class or interface. It returns true if the object is an instance of the specified type, otherwise False.",
        "learned": False
    },
    {
        "number": 108,
        "question": "What is the purpose of the 'import' statement in Java?",
        "answer": "The 'import' statement in Java is used to import classes, interfaces, or entire packages into the current source file. It allows you to use the imported types without fully qualifying their names.",
        "learned": False
    },
    {
        "number": 109,
        "question": "What is a package in Java?",
        "answer": "A package in Java is a mechanism for organizing related classes and interfaces into namespaces. It helps prevent naming conflicts, improve code reusability, and make code easier to manage.",
        "learned": False
    },
    {
        "number": 110,
        "question": "What is the 'default' keyword used for in Java?",
        "answer": "The 'default' keyword in Java is used to provide a default implementation for methods in interfaces. It allows interfaces to evolve over time without breaking existing implementations.",
        "learned": False
    },
    {
        "number": 111,
        "question": "What is a static block in Java?",
        "answer": "A static block in Java is a block of code enclosed in curly braces that is executed when the class is loaded into memory. It is used to initialize static variables or perform any other initialization tasks that need to be done once when the class is initialized.",
        "learned": False
    },
    {
        "number": 112,
        "question": "What is the 'this' keyword used for in Java?",
        "answer": "The 'this' keyword in Java is used to refer to the current object instance within a class. It can be used to access instance variables, call other constructors, or pass the current object as a parameter.",
        "learned": False
    },
    {
        "number": 113,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 114,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 115,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 116,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 117,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 118,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 119,
        "question": "What is method reference in Java?",
        "answer": "Method reference in Java is a shorthand syntax for invoking a method using the double colon (::) operator. It is used to pass methods as arguments to functional interfaces or lambda expressions.",
        "learned": False
    },
    {
        "number": 120,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 121,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 122,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 123,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 124,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 125,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 126,
        "question": "What is the difference between '==' and 'equals()' method in Java?",
        "answer": "'==' is used to compare the reference of two objects in Java, while 'equals()' method is used to compare the content or value of two objects.",
        "learned": False
    },
    {
        "number": 127,
        "question": "What is the 'instanceof' operator used for in Java?",
        "answer": "The 'instanceof' operator in Java is used to test whether an object is an instance of a particular class or interface. It returns true if the object is an instance of the specified type, otherwise False.",
        "learned": False
    },
    {
        "number": 128,
        "question": "What is the purpose of the 'import' statement in Java?",
        "answer": "The 'import' statement in Java is used to import classes, interfaces, or entire packages into the current source file. It allows you to use the imported types without fully qualifying their names.",
        "learned": False
    },
    {
        "number": 129,
        "question": "What is a package in Java?",
        "answer": "A package in Java is a mechanism for organizing related classes and interfaces into namespaces. It helps prevent naming conflicts, improve code reusability, and make code easier to manage.",
        "learned": False
    },
    {
        "number": 130,
        "question": "What is the 'default' keyword used for in Java?",
        "answer": "The 'default' keyword in Java is used to provide a default implementation for methods in interfaces. It allows interfaces to evolve over time without breaking existing implementations.",
        "learned": False
    },
    {
        "number": 131,
        "question": "What is a static block in Java?",
        "answer": "A static block in Java is a block of code enclosed in curly braces that is executed when the class is loaded into memory. It is used to initialize static variables or perform any other initialization tasks that need to be done once when the class is initialized.",
        "learned": False
    },
    {
        "number": 132,
        "question": "What is the 'this' keyword used for in Java?",
        "answer": "The 'this' keyword in Java is used to refer to the current object instance within a class. It can be used to access instance variables, call other constructors, or pass the current object as a parameter.",
        "learned": False
    },
    {
        "number": 133,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 134,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 135,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 136,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 137,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 138,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 139,
        "question": "What is method reference in Java?",
        "answer": "Method reference in Java is a shorthand syntax for invoking a method using the double colon (::) operator. It is used to pass methods as arguments to functional interfaces or lambda expressions.",
        "learned": False
    },
    {
        "number": 140,
        "question": "What is method overloading in Java?",
        "answer": "Method overloading in Java is the technique of defining multiple methods in the same class with the same name but different parameter lists. It allows methods to perform similar tasks with different inputs.",
        "learned": False
    },
    {
        "number": 141,
        "question": "What is method chaining in Java?",
        "answer": "Method chaining in Java is the practice of calling multiple methods on the same object in a single statement. It allows for concise and fluent syntax.",
        "learned": False
    },
    {
        "number": 142,
        "question": "What is method hiding in Java?",
        "answer": "Method hiding in Java occurs when a subclass defines a static method with the same name and signature as a static method in its superclass. The subclass method hides the superclass method, and the method to be called is determined by the reference type at compile time.",
        "learned": False
    },
    {
        "number": 143,
        "question": "What is the 'super' keyword used for in Java?",
        "answer": "The 'super' keyword in Java is used to refer to the superclass of the current object. It can be used to call superclass constructors, access superclass methods and variables, and invoke superclass constructors with specific arguments.",
        "learned": False
    },
    {
        "number": 144,
        "question": "What is the 'final' keyword used for in Java?",
        "answer": "The 'final' keyword in Java is used to restrict the modification of variables, methods, and classes. A final variable cannot be reassigned, a final method cannot be overridden, and a final class cannot be subclassed.",
        "learned": False
    },
    {
        "number": 145,
        "question": "What is method overriding in Java?",
        "answer": "Method overriding in Java is the process of providing a new implementation for a method that is already defined in a superclass. It allows a subclass to provide its own implementation of a method inherited from its superclass.",
        "learned": False
    },
    {
        "number": 146,
        "question": "What is the difference between '==' and 'equals()' method in Java?",
        "answer": "'==' is used to compare the reference of two objects in Java, while 'equals()' method is used to compare the content or value of two objects.",
        "learned": False
    },
    {
        "number": 147,
        "question": "What is the 'instanceof' operator used for in Java?",
        "answer": "The 'instanceof' operator in Java is used to test whether an object is an instance of a particular class or interface. It returns true if the object is an instance of the specified type, otherwise False.",
        "learned": False
    },
    {
        "number": 148,
        "question": "What is the purpose of the 'import' statement in Java?",
        "answer": "The 'import' statement in Java is used to import classes, interfaces, or entire packages into the current source file. It allows you to use the imported types without fully qualifying their names.",
        "learned": False
    },
    {
        "number": 149,
        "question": "What is a package in Java?",
        "answer": "A package in Java is a mechanism for organizing related classes and interfaces into namespaces. It helps prevent naming conflicts, improve code reusability, and make code easier to manage.",
        "learned": False
    }
]
